// 클래스가 기본 단위, 클래스 안에 클래스 생성 가능(inner class)
// 클래스 안에 있는 것은 메서드, 클래스 밖에 있는 것은 function
// 자바는 전역 변수 개념이 없음, 클래스 안에 멤버 변수, 지역 변수 있음
// 객체지향언어: 캡슐화, 추상화, 상속, 다형성 등
// 중간코드(바이트코드 .class) 사용

/* 객체 지향 프로그래밍
 * 여러 독립적인 부품들의 조합, 즉 객체들의 유기적인 협력과 결합으로 파악하고자 함
 * 객체(object): 명사(속성/예금주, 계좌번호, 잔고)와 동사(behaviour -> method/입금한다, 출금한다,)적인 것을 모두 포함
 * 사물을 가지고 객체화 시킬 수 있는지, 프로그래밍 대상이 되는 요소를 **추상화**할 수 있는지
 * 추상화: 현실세계의 사물이나 개념에서 공통된 속성과 기능을 추출하여 객체로 표현하는 것
 * 		   객체의 공통적인 속성과 기능을 추출하여 정의하는 것
 * 상속: 기존에 정의되어 있는 클래스를 재활용하여 클래스를 작성하는 자바의 문법 요소
 * 다형성: 어떤 객체의 속성이나 기능이 상황에 따라 여러 가지 형태를 가질 수 있는 성질
 * 캡슐화: 클래스 안에 서로 연관 이는 속성과 기능들을 하나의 캡슐로 만들어 데이터를 외부로부터 보호하는 것
 * 	 	   데이터 보호 및 데이터 은닉(접근지정자)
 */

/* 자바 개발 시 문법 주의 사항
 * -대소문자 철저히 구분
 * -반드시 세미콜론으로 종료
 * -{}안에는 가독성을 위해 tab입력
 * -가독성 위해 한줄에 하나의 명령문만 입력
 * -프로그램의 기본 단위는 **클래스**이며, 선언문, 명령문 등은 모두 클래스 내부에 존재
 * -프로그램의 진입점은 main()메소드: public static void main(String[] args){}, 클래스 안에 하나만 있어야함
 * -기본적으로 클래스명이 파일명
 * -하나의 파일에는 여러 개의 클래스를 가질 수 있지만 public 키워드는 클래스 한 개만 가질 수 있고 그 클래스 명이 파일명
 * -main() 메소드를 갖는 클래스가 public 키워드 가질 수 있음
 * 
 * reserved word:keyword(if, int, double ...)
 * identifier: 사용자가 프로그래밍 개발을 위해 사용하는 고유 이름, 변수 클래스 메서드 등에 붙이는 이름
 * -PascalCase(클래스, 예외), camelCase(변수, 메서드명), UPPER_CASE(상수 변수명)
 * -Boolean 타입: is라는 접두사 이용(isFlag = true)
 * */
public class First {
	public static void main(String[] args) {
		System.out.print("Hello World!");
	}
}
